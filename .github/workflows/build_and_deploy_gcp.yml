on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: "dev"
      core_app:
        required: false
        type: string
        description: "Core app name"
        default: "polygon-docs"

env:
  REGISTRY: europe-west2-docker.pkg.dev/prj-polygonlabs-shared-prod/polygonlabs-docker-prod
  IMAGE_NAME: ${{ inputs.core_app }}
  OIDC_PROVIDER: projects/23849419004/locations/global/workloadIdentityPools/polygonlabs-shared-prod/providers/oidc-shared-prod
  OIDC_SERVICE_ACCOUNT: shared-prod-oidc-sa@prj-polygonlabs-shared-prod.iam.gserviceaccount.com

permissions:
  contents: read
  id-token: write

jobs:
  generate-version:
    uses: 0xPolygon/pipelines/.github/workflows/generate_version.yaml@main

  build_and_deploy:
    needs:
      - generate-version
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: write
      pull-requests: write
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install uv
        uses: astral-sh/setup-uv@v5
        with:
          enable-cache: true

      - name: Install the project
        run: uv sync --locked --all-extras --dev

      - name: Authenticate GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: Build Site
        run: |
          uv run python build_branches.py -env "${{ inputs.environment }}"

      - name: Authenticate with GCP via OIDC
        uses: google-github-actions/auth@v2
        with:
          token_format: access_token
          workload_identity_provider: ${{ env.OIDC_PROVIDER }}
          service_account: ${{ env.OIDC_SERVICE_ACCOUNT }}

      - name: Configure Artifact Registry authentication
        run: |
          echo '{"credHelpers": {"europe-west2-docker.pkg.dev": "gcloud"}}' > ~/.docker/config.json

      - name: Sanitize and Set IMAGE_TAG
        id: set-image-tag
        run: |
          # Get the version from the previous job output
          RAW_VERSION="${{ needs.generate-version.outputs.version }}"

          # Sanitize the version:
          # 1. Replace invalid characters (like +, :, /) with hyphens
          # 2. Remove any leading/trailing hyphens or multiple consecutive hyphens
          # This creates a more Docker-friendly tag
          SANITIZED_VERSION=$(echo "$RAW_VERSION" | sed -E 's/[^a-zA-Z0-9._-]+/-/g' | sed -E 's/^-+|-+$//g' | sed -E 's/--+/-/g')

          # Combine with run_number for uniqueness, ensuring it's valid
          FINAL_IMAGE_TAG="${SANITIZED_VERSION}-${{ github.run_number }}"

          echo "Generated Docker Tag: $FINAL_IMAGE_TAG"
          echo "IMAGE_TAG=$FINAL_IMAGE_TAG" >> $GITHUB_ENV

      - name: Build and Push image to GCP Artifact Registry
        id: build-image
        run: |
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} -f Dockerfile.review .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}
          echo "image_uri=${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT
