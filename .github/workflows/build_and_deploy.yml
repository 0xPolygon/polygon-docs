on:
  workflow_call:
    inputs:
      environment:
        required: false
        type: string
        default: "dev"
      core_app:
        required: false
        type: string
        description: "Core app name"
        default: "docs"
      account_number:
        required: false
        type: string
        description: "AWS Account number for deployment"
        default: "058264511034"
      region:
        required: false
        type: string
        description: "AWS region for deployment"
        default: "eu-west-1"
      task_definition:
        required: false
        type: string
        description: "Task Definition path for deployment"
        default: ".github/assets/dev-taskdef.json"
      cluster_name:
        required: false
        type: string
        description: "Cluster name for deployment"
        default: "frontend-dev-ecs-cluster"

jobs:
  build_site_data:
    name: ${{ inputs.environment }} deployment
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    permissions:
      id-token: write
      contents: write
    env:
      AWS_REGION: ${{ inputs.region }}
      ECR_REPOSITORY: ${{ inputs.core_app }}-${{ inputs.environment }}-ecr
      ECS_SERVICE: ${{ inputs.core_app }}-${{ inputs.environment }}-ecs-service
      ECS_CLUSTER: frontend-${{ inputs.environment }}-ecs-cluster
      ECS_TASK_DEFINITION: ${{ inputs.task_definition }}
      APP_NAME: ${{ inputs.core_app }}-${{ inputs.environment }}
    steps:
      - name: Checkout Code Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Get list of changed files
        id: changes
        run: |
          changed_files=$(git diff --name-only HEAD^ HEAD)
          echo "Changed files: $changed_files"
          echo "FILES_CHANGED=$changed_files" >> "$GITHUB_OUTPUT"

      - name: Stop if no files changed
        if: ${{ steps.changes.outputs.FILES_CHANGED == '' }}
        run: |
          echo "No files were changed, skipping build."
          exit 0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: arn:aws:iam::${{ inputs.account_number }}:role/${{ env.APP_NAME }}-GithubActionsRole
          role-session-name: GithubActionsSession

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install pipenv
        run: pip install pipenv

      - name: Install GitHub CLI
        run: |
          (type -p wget >/dev/null || (sudo apt update && sudo apt-get install wget -y)) \
            && sudo mkdir -p -m 755 /etc/apt/keyrings \
            && wget -qO- https://cli.github.com/packages/githubcli-archive-keyring.gpg | sudo tee /etc/apt/keyrings/githubcli-archive-keyring.gpg > /dev/null \
            && sudo chmod go+r /etc/apt/keyrings/githubcli-archive-keyring.gpg \
            && echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main" | sudo tee /etc/apt/sources.list.d/github-cli.list > /dev/null \
            && sudo apt update \
            && sudo apt install gh -y

      - name: Authenticate GitHub CLI
        run: gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

      - name: Build Site
        run: |
          python build_branches.py      

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}-${{ github.run_number }}
          ECR_REPOSITORY: ${{ env.APP_NAME }}-ecr
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG -f Dockerfile.review .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.APP_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true

      - name: Cloudflare Cache Purge
        uses: nathanvaughn/actions-cloudflare-purge@master
        with:
          cf_zone: ${{ secrets.CLOUDFLARE_ZONE }}
          cf_auth: ${{ secrets.CLOUDFLARE_AUTH_KEY }}
          hosts: ${{ env.APP_NAME }}.polygon.technology
